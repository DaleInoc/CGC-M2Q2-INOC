import * as THREE from 'three';

const scene = new THREE.Scene();
scene.fog = new THREE.Fog( 0xcccccc);
scene.background = new THREE.Color( 0xffffff );

const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );

const light = new THREE.PointLight( 0x404040, 300, 1000);
light.position.set( 0, .75, 2 );
scene.add( light );

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
renderer.shadowMap.enabled = true;
renderer.setAnimationLoop( animate );
document.body.appendChild( renderer.domElement );


const leftWallGeometry = new THREE.BoxGeometry( 5, 2, 0.5 );
const leftWallMaterial = new THREE.MeshLambertMaterial({color:0xf2e8bd, fog: true});
const leftWall = new THREE.Mesh( leftWallGeometry, leftWallMaterial );
leftWall.castShadow = true;
leftWall.receiveShadow = true;
leftWall.rotation.y = Math.PI / 2;
leftWall.position.x = 2.5;
leftWall.position.y = 0;
leftWall.position.z = 2;
scene.add( leftWall );

const rightWallGeometry = new THREE.BoxGeometry( 5, 2, 0.5 );
const rightWallMaterial = new THREE.MeshLambertMaterial({color:0xf2e8bd, fog: true});
const rightWall = new THREE.Mesh( rightWallGeometry, rightWallMaterial );
rightWall.castShadow = true;
rightWall.receiveShadow = true;
rightWall.rotation.y = Math.PI / 2;
rightWall.position.x = -2.5;
rightWall.position.y = 0;
rightWall.position.z = 2;
scene.add( rightWall );

const ceilingGeometry = new THREE.BoxGeometry( 5, 7, 0.5 );
const ceilingWallMaterial = new THREE.MeshLambertMaterial({color:0x674928, fog: true});
const ceilingWall = new THREE.Mesh( ceilingGeometry, ceilingWallMaterial );
ceilingWall.castShadow = true;
ceilingWall.receiveShadow = true;
ceilingWall.rotation.x = Math.PI / 2;
ceilingWall.position.x = 0;
ceilingWall.position.y = 1.25;
ceilingWall.position.z = 2;
scene.add( ceilingWall );

const floorGeometry = new THREE.BoxGeometry( 5, 7, 0.5 );
const floorMaterial = new THREE.MeshLambertMaterial({color:0x674928, fog: true});
const floor = new THREE.Mesh( floorGeometry, floorMaterial );
floor.castShadow = true;
floor.receiveShadow = true;
floor.rotation.x = Math.PI / 2;
floor.position.x = 0;
floor.position.y = -1.25;
floor.position.z = 2;
scene.add( floor );

const windowWallGeometry = new THREE.BoxGeometry( 5, 2, 0.5 );
const windowWallMaterial = new THREE.MeshLambertMaterial({color:0xf2e8bd, fog: true});
const windowWall = new THREE.Mesh( windowWallGeometry, windowWallMaterial );
windowWall.castShadow = true;
windowWall.receiveShadow = true;
windowWall.position.x = 0;
windowWall.position.y = 0;
windowWall.position.z = -0.45;
scene.add( windowWall );

const carpetGeometry = new THREE.BoxGeometry( 2, 2, 0.01 );
const carpetMaterial = new THREE.MeshLambertMaterial({color:0xc32a2a, fog: true});
const carpet = new THREE.Mesh( carpetGeometry, carpetMaterial );
carpet.castShadow = true;
carpet.receiveShadow = true;
carpet.rotation.x = Math.PI / 2;
carpet.position.x = 0;
carpet.position.y = -1;
carpet.position.z = 2.5;
scene.add( carpet );

const tabletopGeometry = new THREE.BoxGeometry( 1, 1, 0.1 );
const tabletopMaterial = new THREE.MeshLambertMaterial({color:0x482029, fog: true});
const tabletop = new THREE.Mesh( tabletopGeometry, tabletopMaterial );
tabletop.castShadow = true;
tabletop.receiveShadow = true;
tabletop.rotation.x = Math.PI / 2;
tabletop.position.x = 2;
tabletop.position.y = -0.5;
tabletop.position.z = 2.5;
scene.add( tabletop );
const tableleg1Geometry = new THREE.BoxGeometry( 0.1, 0.7, 0.1 );
const tableleg1Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const tableleg1 = new THREE.Mesh( tableleg1Geometry, tableleg1Material );
tableleg1.castShadow = true;
tableleg1.receiveShadow = true;
tableleg1.position.x = 2.1;
tableleg1.position.y = -0.89;
tableleg1.position.z = 2.95;
scene.add( tableleg1 );
const tableleg2Geometry = new THREE.BoxGeometry( 0.1, 0.7, 0.1 );
const tableleg2Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const tableleg2 = new THREE.Mesh( tableleg2Geometry, tableleg2Material );
tableleg2.castShadow = true;
tableleg2.receiveShadow = true;
tableleg2.position.x = 1.6;
tableleg2.position.y = -0.89;
tableleg2.position.z = 2.95;
scene.add( tableleg2 );
const tableleg3Geometry = new THREE.BoxGeometry( 0.1, 0.7, 0.1 );
const tableleg3Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const tableleg3 = new THREE.Mesh( tableleg3Geometry, tableleg3Material );
tableleg3.castShadow = true;
tableleg3.receiveShadow = true;
tableleg3.position.x = 1.6;
tableleg3.position.y = -0.89;
tableleg3.position.z = 2.05;
scene.add( tableleg3 );
const tableleg4Geometry = new THREE.BoxGeometry( 0.1, 0.7, 0.1 );
const tableleg4Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const tableleg4 = new THREE.Mesh( tableleg4Geometry, tableleg4Material );
tableleg4.castShadow = true;
tableleg4.receiveShadow = true;
tableleg4.position.x = 2.1;
tableleg4.position.y = -0.89;
tableleg4.position.z = 2.05;
scene.add( tableleg4 );

const doorGeometry = new THREE.BoxGeometry( 1, 1.9, 0.01 );
const doorMaterial = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const door = new THREE.Mesh( doorGeometry, doorMaterial );
door.castShadow = true;
door.receiveShadow = true;
door.rotation.y = Math.PI / 2;
door.position.x = 2.25;
door.position.y = -0.1;
door.position.z = 1;
scene.add( door );
const handlegeometry = new THREE.SphereGeometry( 0.05,16,5);
const handlematerial = new THREE.MeshLambertMaterial( { color: 0xFFD700 } );
const handle = new THREE.Mesh( handlegeometry, handlematerial );
handle.castShadow = true;
handle.receiveShadow = true;
handle.rotation.y = Math.PI/4;
handle.position.x = 2.24;
handle.position.y = -0.1;
handle.position.z = 1.35;
scene.add( handle );

const chairgeometry = new THREE.BoxGeometry( 0.35, 0.1, 0.35, 16 );
const chairmaterial = new THREE.MeshBasicMaterial( {color: 0x482029,fog: true} );
const chair = new THREE.Mesh( chairgeometry, chairmaterial );
chair.castShadow = true;
chair.receiveShadow = true;
chair.position.x = 1.5;
chair.position.y = -0.75;
chair.position.z = 2.5;
scene.add( chair );
const chairleg1Geometry = new THREE.BoxGeometry( 0.05, 0.5, 0.05 );
const chairleg1Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairleg1 = new THREE.Mesh( chairleg1Geometry, chairleg1Material );
chairleg1.castShadow = true;
chairleg1.receiveShadow = true;
chairleg1.position.x = 1.6;
chairleg1.position.y = -1;
chairleg1.position.z = 2.6;
scene.add( chairleg1 );
const chairleg2Geometry = new THREE.BoxGeometry( 0.05, 0.5, 0.05 );
const chairleg2Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairleg2 = new THREE.Mesh( chairleg2Geometry, chairleg2Material );
chairleg2.castShadow = true;
chairleg2.receiveShadow = true;
chairleg2.position.x = 1.4;
chairleg2.position.y = -1;
chairleg2.position.z = 2.6;
scene.add( chairleg2 );
const chairleg3Geometry = new THREE.BoxGeometry( 0.05, 0.5, 0.05 );
const chairleg3Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairleg3 = new THREE.Mesh( chairleg3Geometry, chairleg3Material );
chairleg3.castShadow = true;
chairleg3.receiveShadow = true;
chairleg3.position.x = 1.4;
chairleg3.position.y = -1;
chairleg3.position.z = 2.4;
scene.add( chairleg3 );
const chairleg4Geometry = new THREE.BoxGeometry( 0.05, 0.5, 0.05 );
const chairleg4Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairleg4 = new THREE.Mesh( chairleg4Geometry, chairleg4Material );
chairleg4.castShadow = true;
chairleg4.receiveShadow = true;
chairleg4.position.x = 1.6;
chairleg4.position.y = -1;
chairleg4.position.z = 2.4;
scene.add( chairleg4 );
const chairsupp1Geometry = new THREE.BoxGeometry( 0.05, 0.1, 0.05 );
const chairsupp1Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairsupp1 = new THREE.Mesh( chairsupp1Geometry, chairsupp1Material );
chairsupp1.castShadow = true;
chairsupp1.receiveShadow = true;
chairsupp1.position.x = 1.4;
chairsupp1.position.y = -0.65;
chairsupp1.position.z = 2.4;
scene.add( chairsupp1 );
const chairsupp2Geometry = new THREE.BoxGeometry( 0.05, 0.1, 0.05 );
const chairsupp2Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const chairsupp2 = new THREE.Mesh( chairsupp2Geometry, chairsupp2Material );
chairsupp2.castShadow = true;
chairsupp2.receiveShadow = true;
chairsupp2.position.x = 1.4;
chairsupp2.position.y = -0.65;
chairsupp2.position.z = 2.6;
scene.add( chairsupp2 );
const chairsupp3geometry = new THREE.BoxGeometry( 0.1, 0.4, 0.25, 16 );
const chairsupp3material = new THREE.MeshBasicMaterial( {color: 0x482029,fog: true} );
const chairsupp3 = new THREE.Mesh( chairsupp3geometry, chairsupp3material );
chairsupp3.castShadow = true;
chairsupp3.receiveShadow = true;
chairsupp3.rotation.x = Math.PI / 2;
chairsupp3.position.x = 1.4;
chairsupp3.position.y = -0.5;
chairsupp3.position.z = 2.5;
scene.add( chairsupp3 );

const pcgeometry = new THREE.BoxGeometry( 0.3, 0.5, 0.2, 16 );
const pcmaterial = new THREE.MeshBasicMaterial( {color: 0xA9A9A9,fog: true} );
const pc = new THREE.Mesh( pcgeometry, pcmaterial );
pc.castShadow = true;
pc.receiveShadow = true;
pc.rotation.x = Math.PI / 2;
pc.position.x = 2.1;
pc.position.y = -0.4;
pc.position.z = 2.5;
scene.add( pc );
const monitorgeometry = new THREE.CylinderGeometry( 0.095, 0.25, 0.3, 4 );
const monitormaterial = new THREE.MeshBasicMaterial( {color: 0x32527B,fog: true} );
const monitor = new THREE.Mesh( monitorgeometry, monitormaterial );
monitor.castShadow = true;
monitor.receiveShadow = true;
monitor.rotation.x = Math.PI/4;
monitor.rotation.z = -Math.PI/2;
monitor.position.x = 2.1;
monitor.position.y = -0.11;
monitor.position.z = 2.5;
scene.add( monitor );
const monitorscreengeometry = new THREE.PlaneGeometry( 0.3, 0.3 );
const monitorscreenmaterial = new THREE.MeshLambertMaterial( {color: 0x000000, side: THREE.DoubleSide} );
const monitorscreen = new THREE.Mesh( monitorscreengeometry, monitorscreenmaterial );
monitorscreen.castShadow = true;
monitorscreen.receiveShadow = true;
monitorscreen.rotation.y = Math.PI/2;
monitorscreen.position.x = 1.94;
monitorscreen.position.y = -0.11;
monitorscreen.position.z = 2.5;
scene.add( monitorscreen );

const bedGeometry = new THREE.BoxGeometry( 1, 1.25, 0.1 );
const bedMaterial = new THREE.MeshLambertMaterial({color:0x152441, fog: true});
const bed = new THREE.Mesh( bedGeometry, bedMaterial );
bed.castShadow = true;
bed.receiveShadow = true;
bed.rotation.x = Math.PI / 2;
bed.position.x = -2;
bed.position.y = -0.99;
bed.position.z = 2.9;
scene.add( bed );
const pillowgeometry = new THREE.BoxGeometry( 0.4, 0.2, 0.15, 16 );
const pillowmaterial = new THREE.MeshBasicMaterial( {color: 0xA9A9A9,fog: true} );
const pillow = new THREE.Mesh( pillowgeometry, pillowmaterial );
pillow.castShadow = true;
pillow.receiveShadow = true;
pillow.position.x = -1.9;
pillow.position.y = -0.98;
pillow.position.z = 3.4;
scene.add( pillow );

const window1geometry = new THREE.PlaneGeometry( 1.25, 1 );
const window1material = new THREE.MeshLambertMaterial( {color: 0xffffff, side: THREE.DoubleSide} );
const window1 = new THREE.Mesh( window1geometry, window1material );
window1.castShadow = true;
window1.receiveShadow = true;
window1.position.x = -1.25;
window1.position.y = 0.25;
window1.position.z = -0.2;
scene.add( window1 );
const window1frame1Geometry = new THREE.BoxGeometry( 0.1, 1.3, 0.1 );
const window1frame1Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window1frame1 = new THREE.Mesh( window1frame1Geometry, window1frame1Material );
window1frame1.castShadow = true;
window1frame1.receiveShadow = true;
window1frame1.rotation.z = Math.PI / 2;
window1frame1.position.x = -1.25;
window1frame1.position.y = 0.7;
window1frame1.position.z = -0.19;
scene.add( window1frame1 );
const window1frame2Geometry = new THREE.BoxGeometry( 0.1, 1.3, 0.1 );
const window1frame2Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window1frame2 = new THREE.Mesh( window1frame2Geometry, window1frame2Material );
window1frame2.castShadow = true;
window1frame2.receiveShadow = true;
window1frame2.rotation.z = Math.PI / 2;
window1frame2.position.x = -1.25;
window1frame2.position.y = -0.3;
window1frame2.position.z = -0.19;
scene.add( window1frame2 );
const window1frame3Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window1frame3Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window1frame3 = new THREE.Mesh( window1frame3Geometry, window1frame3Material );
window1frame3.castShadow = true;
window1frame3.receiveShadow = true;
window1frame3.position.x = -1.85;
window1frame3.position.y = 0.2;
window1frame3.position.z = -0.19;
scene.add( window1frame3 );
const window1frame4Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window1frame4Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window1frame4 = new THREE.Mesh( window1frame4Geometry, window1frame4Material );
window1frame4.castShadow = true;
window1frame4.receiveShadow = true;
window1frame4.position.x = -0.65;
window1frame4.position.y = 0.2;
window1frame4.position.z = -0.19;
scene.add( window1frame4 );
const window1frame5Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window1frame5Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window1frame5 = new THREE.Mesh( window1frame5Geometry, window1frame5Material );
window1frame5.castShadow = true;
window1frame5.receiveShadow = true;
window1frame5.position.x = -1.25;
window1frame5.position.y = 0.2;
window1frame5.position.z = -0.19;
scene.add( window1frame5 );

const window2geometry = new THREE.PlaneGeometry( 1.25, 1 );
const window2material = new THREE.MeshLambertMaterial( {color: 0xffffff, side: THREE.DoubleSide} );
const window2 = new THREE.Mesh( window2geometry, window2material );
window2.castShadow = true;
window2.receiveShadow = true;
window2.rotation.y = Math.PI / 2;
window2.position.x = -2.2;
window2.position.y = 0.25;
window2.position.z = 2;
scene.add( window2 );
const window2frame1Geometry = new THREE.BoxGeometry( 0.1, 1.3, 0.1 );
const window2frame1Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window2frame1 = new THREE.Mesh( window2frame1Geometry, window2frame1Material );
window2frame1.castShadow = true;
window2frame1.receiveShadow = true;
window2frame1.rotation.y = Math.PI / 2;
window2frame1.rotation.z = Math.PI / 2;
window2frame1.position.x = -2.2;
window2frame1.position.y = 0.7;
window2frame1.position.z = 2;
scene.add( window2frame1 );
const window2frame2Geometry = new THREE.BoxGeometry( 0.1, 1.3, 0.1 );
const window2frame2Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window2frame2 = new THREE.Mesh( window2frame2Geometry, window2frame2Material );
window2frame2.castShadow = true;
window2frame2.receiveShadow = true;
window2frame2.rotation.y = Math.PI / 2;
window2frame2.rotation.z = Math.PI / 2;
window2frame2.position.x = -2.2;
window2frame2.position.y = -0.2;
window2frame2.position.z = 2;
scene.add( window2frame2 );
const window2frame3Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window2frame3Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window2frame3 = new THREE.Mesh( window2frame3Geometry, window2frame3Material );
window2frame3.castShadow = true;
window2frame3.receiveShadow = true;
window2frame3.position.x = -2.2;
window2frame3.position.y = 0.25;
window2frame3.position.z = 2.6;
scene.add( window2frame3 );
const window2frame4Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window2frame4Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window2frame4 = new THREE.Mesh( window2frame4Geometry, window2frame4Material );
window2frame4.castShadow = true;
window2frame4.receiveShadow = true;
window2frame4.position.x = -2.2;
window2frame4.position.y = 0.25;
window2frame4.position.z = 1.4;
scene.add( window2frame4 );
const window2frame5Geometry = new THREE.BoxGeometry( 0.1, 1, 0.1 );
const window2frame5Material = new THREE.MeshLambertMaterial({color:0x808080, fog: true});
const window2frame5 = new THREE.Mesh( window2frame5Geometry, window2frame5Material );
window2frame5.castShadow = true;
window2frame5.receiveShadow = true;
window2frame5.position.x = -2.2;
window2frame5.position.y = 0.25;
window2frame5.position.z = 2;
scene.add( window2frame5 );

camera.position.z = 5;

function animate() {
    renderer.render( scene, camera );
}